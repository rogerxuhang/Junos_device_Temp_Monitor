#!/usr/bin/python3
#-*- coding:UTF-8 -*-
import telnetlib
import time
import re
import threading


def show_result_log_filename(Port):
    show_chassis_environment_filename = r"H:/Pycharm_Project/"+str(Port)+r"_Temp.txt"
    return show_chassis_environment_filename

#show_chassis_environment_filename = r"H:/Pycharm_Project/Temp.txt"
def device_halt_log_filename(Port):
    device_halt_log_filepath = r"H:/Pycharm_Project/"+str(Port)+r"_Log.txt"
    return device_halt_log_filepath

def Console_Server_Login_Normal(HOST, Port, Username, Password):
    try:
        tn_1 = telnetlib.Telnet(HOST,Port)    # Login to Console server
        tn_1.set_debuglevel(2)
        tn_1.read_until(b'Login : ', 1)
        tn_1.write(Username.encode('utf-8') + b"\n")
        tn_1.read_until(b'Password : ')
        tn_1.write(Password.encode('utf-8') + b"\n")
        #tn_1.write(b'\n')
        tn_1.read_until(b"root")   # Login as 'root' account, key word 'root' will display from the window
        #tn_1.write(b"\n")
        #tn_1.write(b'\x03')   # Input 'ctrl+c' to interrupt the ping testing it there has
        tn_1.write(b"\n")
        Device_Login_Result = tn_1.read_until(b'login:', 3)   # Device status is "login:)
        time.sleep(1)  # 20180228 15:51 added
        if "login" in str(Device_Login_Result):
            tn_1.write(Username.encode('utf-8')+b'\n')
            tn_1.read_until(b'Password', 1)
            tn_1.write(Password.encode('utf-8')+b'\n')
            time.sleep(2)  # Added 201803011334
            tn_1.write(b'cli -c \"show chassis environment\"'+b'\n')
            time.sleep(4)
            result_1 = tn_1.read_very_eager()
            print (tn_1.read_very_eager().decode('ascii'))
            file_object = open(show_result_log_filename(Port), 'wb+')
            file_object.write(result_1)    # Storage the show output result
            #current_time = time.asctime()
            file_object.close()
            #time.sleep(12)
            if Device_Temp_Check() == "High":
                tn_1.write(b'cli -c \"request system halt\"' + b'\n')
                Device_Halt_Record(Port)
                tn_1.close()
                time.sleep(3600)
            else:
                pass
                tn_1.close()
            return "normal"
        elif re.search('loader', str(Device_Login_Result)):
            tn_1.write(b'reboot'+b'\n')
            time.sleep(2)
            tn_1.read_until(b'login:', 3)
            tn_1.write(Username.encode('utf-8') + b'\n')
            tn_1.read_until(b'Password', 1)
            tn_1.write(Password.encode('utf-8') + b'\n')
            time.sleep(2)  # Added 201803011334
            tn_1.write(b'cli -c \"show chassis environment\"' + b'\n')
            time.sleep(4)
            result_1 = tn_1.read_very_eager()
            print(tn_1.read_very_eager().decode('ascii'))
            file_object = open(show_result_log_filename(Port), 'wb+')
            file_object.write(result_1)  # Storage the show output result
            # current_time = time.asctime()
            file_object.close()
            #time.sleep(12)
            if Device_Temp_Check() == "High":
                tn_1.write(b'cli -c \"request system halt\"' + b'\n')
                Device_Halt_Record(Port)
                tn_1.close()
                time.sleep(3600)
            else:
                pass
                tn_1.close()
            return "normal"

        elif re.search('root(.*)>', str(Device_Login_Result)):
        #elif ">" in str(Device_Login_Result):     # Device status is ">"
            time.sleep(2) # Added 201803011444 try to collect show result better
            tn_1.write(b'show chassis environment\n')
            time.sleep(3)
            result_2 = tn_1.read_very_eager()
            print(tn_1.read_very_eager().decode('ascii'))
            file_object = open(show_result_log_filename(Port),'wb+')
            file_object.write(result_2)
            file_object.close()
            #time.sleep(12)
            if Device_Temp_Check() == "High":
                tn_1.write(b'request system halt' + b'\n')
                tn_1.read_until(b'yes,')
                tn_1.write(b'yes'+b'\n')
                Device_Halt_Record(Port)
                tn_1.close()
                time.sleep(3600)
            else:
                pass
                tn_1.close()
            return "normal"
        elif re.search('root(.*)%', str(Device_Login_Result)):
        #elif "root%" in str(Device_Login_Result):  # Device status is "#"
            time.sleep(2) # Added 201803011443 try to storage show result better
            tn_1.write(b"cli -c \"show chassis environment\""+b'\n')
            time.sleep(4)
            result_3=tn_1.read_very_eager()
            print (result_3.decode('ascii'))
            file_object = open(show_result_log_filename(Port),'wb+')
            file_object.write(result_3)
            file_object.close()
            #time.sleep(12) # Added 201803011433 try to fix no file found
            if Device_Temp_Check() == "High":
                tn_1.write(b'cli -c \"request system halt\"' + b'\n')
                Device_Halt_Record(Port)
                tn_1.close()
                time.sleep(3600)
            else:
                pass
                tn_1.close()
            return "normal"
        elif re.search('root(.*)#', str(Device_Login_Result)):
            # elif "#" in str(Device_Login_Result):  # Device status is "#"
            time.sleep(2) # Added 201803011445 try to storage the show result better
            tn_1.write(b'run show chassis environment\n')
            time.sleep(5)
            result_4 = tn_1.read_very_eager()
            file_object = open(show_result_log_filename(Port), 'wb+')
            file_object.write(result_4)
            file_object.close()
           # time.sleep(12)  # Added 201803011122 to leave more time to storage file
            if Device_Temp_Check() == "High":
                tn_1.write(b'run request system halt' + b'\n')
                tn_1.read_until(b'yes,')
                tn_1.write(b'yes' + b'\n')
                Device_Halt_Record(Port)
                tn_1.close()
                time.sleep(3600)
            else:
                pass
                tn_1.close()
            return "normal"
        elif re.search('ro', str(Device_Login_Result)):  # Added at 201803011045 for catch 'root@SRX650-2#'
            # elif "#" in str(Device_Login_Result):  # Device status is "#"
            print("fagafagafdgafagafagagaaf")
            time.sleep(2) # Added 201803011446 try to storage the show result better.
            tn_1.write(b'run show chassis environment\n')
            time.sleep(3)
            result_4 = tn_1.read_very_eager()
            file_object = open(show_result_log_filename(Port), 'wb+')
            file_object.write(result_4)
            file_object.close()
            #time.sleep(12)
            if Device_Temp_Check() == "High":
                tn_1.write(b'run request system halt' + b'\n')
                tn_1.read_until(b'yes,')
                tn_1.write(b'yes' + b'\n')
                Device_Halt_Record(Port)
                tn_1.close()
                time.sleep(3600)
            else:
                pass
                tn_1.close()
            return "normal"
        else:
            print("Console cable disconneted or device in booting process")
            return "normal"
    except EOFError:
        return "abnormal"

def Console_Server_Login_Fail(HOST, Port, Username, Password):   # If port is in use
    tn_2 = telnetlib.Telnet(HOST,Port)
    tn_2.set_debuglevel(2)
    tn_2.read_until(b'Port'+b'\n')
    print("Port in use")
    tn_2.close()
    return "failed"

def Device_Temp_Check():   # Device Temp checking
    file_object = open(show_result_log_filename(Port),'r+')
    for line in file_object.readlines():
        print(line)
        if 'high' in line:
            print("Find")
            return "High"
        else:
            print('Not find')
    file_object.close()

def Device_Halt_Record(Port):
    device_halt_log_create = open(device_halt_log_filename(Port), 'a+')
    log_content = "{} device port {} is halted as high temp". format(time.asctime(), Port)+'\n'
    device_halt_log_create.write(log_content)
    device_halt_log_create.close()

def Console_Server_Login(HOST, Port, Username, Password):
    try:
        while 1:
            if Console_Server_Login_Normal(HOST, Port, Username, Password) == "normal":
                time.sleep(600)
                Console_Server_Login(HOST, Port, Username, Password)
            elif Console_Server_Login_Fail(HOST, Port, Username, Password) == 'failed':
                time.sleep(600)
                Console_Server_Login(HOST, Port, Username, Password)
    except FileNotFoundError:
        time.sleep(10)
        print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
        Console_Server_Login(HOST, Port, Username, Password)

#class MyThread(threading.Thread):
    #def __init__(self,HOST,Port,Username,Password):
        #threading.Thread.__init__(self)
        #self.HOST = HOST
        #self.Port = Port
        #self.Username = Username
        #self.Password = Password

    #def run(self):
       # print("start")
        #threadLock.acquire()
        #Console_Server_Login(self.HOST, self.Port, self.Username, self.Password)
        #threadLock.release()

#def main():
    #for Port in port:
        #thread = MyThread(HOST,Port,Username,Password)
        #thread.start()

if __name__ == '__main__':
    HOST = "10.75.252.1"

    port = [7001,7002,7003,7004,7005,7006,7007,7008,7009,7016,7017,7018,7019,7020,7021,7022,7024]
    #port = [7019,7020,7021]
    Username = 'root'
    Password = 'root123'
    #threadLock = threading.Lock()
    #main()
    #tn = telnetlib.Telnet(HOST, Port, timeout=100)
    for Port in port:
        #Mythread(HOST,Port,Username,Password)
        #Mythread().thread.start()

        t = threading.Thread(target=Console_Server_Login,args=(HOST,Port,Username,Password))
        t.start()
    #Console_Server_Login(HOST,Port, Username,Password)
    #Device_Temp_Check()
